---
description: 
globs: 
alwaysApply: false
---
# UI 最佳实践指南

<version>1.0.0</version>

## 状态：已批准

## 概述

本文档定义了基于 Next.js、TailwindCSS 和 shadcn/ui 技术栈的 UI 开发最佳实践指南。旨在确保代码质量、性能优化和开发效率。

## 组件开发规范

### 组件命名规范

```typescript
// ✅ 好的命名示例
const UserProfile = () => { ... }
const ProductCard = () => { ... }
const NavigationMenu = () => { ... }

// ❌ 避免的命名示例
const Comp1 = () => { ... }
const UserStuff = () => { ... }
const Thing = () => { ... }
```

### 组件结构规范

```typescript
// ✅ 推荐的组件结构
import { useState, useEffect } from 'react'
import { cn } from '@/lib/utils'

interface ButtonProps {
  variant?: 'default' | 'outline' | 'ghost'
  size?: 'sm' | 'md' | 'lg'
  children: React.ReactNode
  className?: string
}

export const Button = ({
  variant = 'default',
  size = 'md',
  children,
  className,
}: ButtonProps) => {
  const baseStyles = 'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background'
  
  return (
    <button
      className={cn(
        baseStyles,
        variant === 'outline' && 'border border-input hover:bg-accent hover:text-accent-foreground',
        variant === 'ghost' && 'hover:bg-accent hover:text-accent-foreground',
        size === 'sm' && 'h-9 px-3',
        size === 'lg' && 'h-11 px-8',
        className
      )}
    >
      {children}
    </button>
  )
}
```

### Props 类型定义规范

```typescript
// ✅ 推荐的类型定义方式
type BaseProps = {
  className?: string
  children: React.ReactNode
}

interface CardProps extends BaseProps {
  title: string
  description?: string
  image?: {
    src: string
    alt: string
  }
}
```

## 样式开发规范

### TailwindCSS 使用规范

```typescript
// ✅ 推荐的类名组织方式
const Card = ({ className, children }: CardProps) => {
  return (
    <div className={cn(
      // 布局类名
      'flex flex-col',
      // 间距类名
      'gap-4 p-6',
      // 外观类名
      'rounded-lg border bg-card text-card-foreground shadow-sm',
      // 交互类名
      'hover:shadow-md transition-shadow duration-200',
      // 自定义类名
      className
    )}>
      {children}
    </div>
  )
}

// ✅ 语义化组件示例
const Header = () => {
  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <nav className="container flex h-14 items-center">
        <Logo className="mr-6" />
        <MainNav className="mx-6" />
        <div className="ml-auto flex items-center space-x-4">
          <SearchBar />
          <UserMenu />
        </div>
      </nav>
    </header>
  )
}

// ✅ 常见布局模式
const Layout = () => {
  return (
    <div className="min-h-screen bg-background">
      {/* 居中布局 */}
      <div className="container mx-auto px-4 py-8">
        {/* 网格布局 */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {/* 卡片 */}
          <div className="rounded-lg border bg-card p-6">
            {/* 弹性布局 */}
            <div className="flex items-center space-x-4">
              <Icon />
              <div className="space-y-1">
                <h3 className="font-medium">标题</h3>
                <p className="text-sm text-muted-foreground">描述文本</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
```

### 响应式设计规范

```typescript
// ✅ 移动优先的响应式设计
const ResponsiveComponent = () => (
  <>
    {/* 响应式容器 */}
    <div className="w-full md:w-3/4 lg:w-2/3 xl:w-1/2 mx-auto">
      {/* 响应式网格 */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {/* 响应式间距 */}
        <div className="p-4 md:p-6 lg:p-8">
          {/* 响应式排版 */}
          <h2 className="text-xl md:text-2xl lg:text-3xl font-bold">
            响应式标题
          </h2>
          <p className="text-sm md:text-base lg:text-lg">
            响应式文本内容
          </p>
        </div>
      </div>
      {/* 响应式 Flex 布局 */}
      <div className="flex flex-col md:flex-row items-center gap-4">
        <div className="w-full md:w-1/2">左侧内容</div>
        <div className="w-full md:w-1/2">右侧内容</div>
      </div>
    </div>
  </>
)
```

## 性能优化指南

### 组件优化

1. 合理使用 React.memo
```typescript
// ✅ 适当场景下使用 memo
const ExpensiveComponent = React.memo(({ data }) => {
  return <div>{/* 复杂渲染逻辑 */}</div>
})
```

2. 优化 useEffect 依赖
```typescript
// ✅ 正确的依赖项使用
useEffect(() => {
  // 副作用逻辑
}, [id, name]) // 明确的依赖项
```

### 图片优化

```typescript
// ✅ 使用 Next.js Image 组件
import Image from 'next/image'

const OptimizedImage = () => (
  <Image
    src="/path/to/image.jpg"
    alt="描述"
    width={800}
    height={600}
    placeholder="blur"
    loading="lazy"
  />
)
```

## 状态管理最佳实践

### 本地状态管理

```typescript
// ✅ 使用 useState 和 useReducer
const [state, setState] = useState({
  isLoading: false,
  error: null,
  data: null,
})

// 复杂状态使用 useReducer
const [state, dispatch] = useReducer(reducer, initialState)
```

### 服务端状态管理

```typescript
// ✅ 使用 React Query
const { data, isLoading, error } = useQuery({
  queryKey: ['todos'],
  queryFn: fetchTodos,
})
```

## 错误处理和边界情况

### 错误边界

```typescript
class ErrorBoundary extends React.Component {
  state = { hasError: false }

  static getDerivedStateFromError(error) {
    return { hasError: true }
  }

  render() {
    if (this.state.hasError) {
      return <ErrorFallback />
    }
    return this.props.children
  }
}
```

### 加载状态处理

```typescript
// ✅ 统一的加载状态组件
const LoadingState = () => (
  <div className="flex items-center justify-center p-4">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary" />
  </div>
)
```

## 辅助工具和开发体验

### 开发工具配置

```json
// ✅ VSCode 推荐配置
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "tailwindCSS.experimental.classRegex": [
    ["cn\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"]
  ]
}
```

### 代码检查和格式化

```json
// ✅ ESLint 配置
{
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "react-hooks/rules-of-hooks": "error"
  }
}
```

## 更新日志

| 更新内容     | Task ID | 说明                   |
| ------------ | ------- | ---------------------- |
| 初始文档创建 | N/A     | 创建 UI 最佳实践指南   |
| 更新样式规范 | N/A     | 优化 TailwindCSS 使用规范 |